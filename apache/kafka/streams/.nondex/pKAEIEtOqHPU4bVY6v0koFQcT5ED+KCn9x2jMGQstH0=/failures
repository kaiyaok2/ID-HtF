org.apache.kafka.streams.TopologyTest.streamStreamOuterJoinTopologyWithCustomStoresNames
org.apache.kafka.streams.TopologyTest.streamStreamOuterJoinTopologyWithCustomStoresSuppliers
org.apache.kafka.streams.TopologyTest.streamStreamLeftJoinTopologyWithCustomStoresNames
org.apache.kafka.streams.kstream.RepartitionTopicNamingTest.shouldReuseFirstRepartitionTopicNameWhenOptimizing
org.apache.kafka.streams.kstream.internals.CogroupedKStreamImplTest.shouldInsertRepartitionsTopicForUpstreamKeyModificationWithGroupedReusedInSameCogroups
org.apache.kafka.streams.kstream.internals.CogroupedKStreamImplTest.shouldInsertRepartitionsTopicForUpstreamKeyModificationWithGroupedReused
org.apache.kafka.streams.kstream.internals.InternalStreamsBuilderTest.shouldHaveCorrectSourceTopicsForTableFromMergedStream
org.apache.kafka.streams.kstream.internals.KStreamKStreamJoinTest.shouldCreateRepartitionTopicsWithUserProvidedName
org.apache.kafka.streams.kstream.internals.KStreamKTableJoinTest.shouldReuseRepartitionTopicWithGeneratedName
org.apache.kafka.streams.kstream.internals.KStreamKTableJoinTest.shouldCreateRepartitionTopicsWithUserProvidedName
org.apache.kafka.streams.kstream.internals.graph.StreamsGraphTest.shouldNotThrowNPEWithMergeNodes
org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest.shouldFlush[0: test=in-memory buffer]
org.apache.kafka.streams.processor.internals.ProcessorTopologyTest.shouldCreateStringWithMultipleSourcesAndTopics
org.apache.kafka.streams.processor.internals.RepartitionOptimizingTest.shouldSendCorrectRecords_OPTIMIZED
org.apache.kafka.streams.processor.internals.RepartitionOptimizingTest.shouldSendCorrectResults_NO_OPTIMIZATION
org.apache.kafka.streams.processor.internals.TaskManagerTest.shouldRethrowTaskCorruptedExceptionFromStateUpdater
org.apache.kafka.streams.processor.internals.StreamTaskTest.shouldThrowTopologyExceptionIfTaskCreatedForUnknownTopic
org.apache.kafka.streams.processor.internals.TaskManagerTest.shouldRethrowTaskCorruptedExceptionFromInitialization
org.apache.kafka.streams.processor.internals.assignment.StickyTaskAssignorTest.shouldOptimizeStatefulAndStatelessTaskTraffic[rackAwareStrategy=none]
org.apache.kafka.streams.processor.internals.assignment.StickyTaskAssignorTest.shouldOptimizeStatefulAndStatelessTaskTraffic[rackAwareStrategy=min_traffic]
org.apache.kafka.streams.processor.internals.assignment.StickyTaskAssignorTest.shouldRemainOriginalAssignmentWithoutTrafficCostForMinCostStrategy[rackAwareStrategy=min_traffic]
org.apache.kafka.streams.processor.internals.assignment.StickyTaskAssignorTest.shouldOptimizeStatefulAndStatelessTaskTraffic[rackAwareStrategy=balance_subtopology]
org.apache.kafka.streams.processor.internals.assignment.ClientTagAwareStandbyTaskAssignorTest.shouldDistributeClientsOnDifferentZoneTagsEvenWhenClientsReachedCapacity
